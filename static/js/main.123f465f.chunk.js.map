{"version":3,"sources":["components/Header/Header.tsx","components/Footer/Footer.tsx","components/Layout/Layout.tsx","contexts/firebase.tsx","hooks/useIdGen.ts","reducers/goals.ts","components/pages/AddGoal/AddGoal.tsx","components/pages/Goal/Goal.tsx","components/pages/Goals/Goals.tsx","services/firebase.service.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","className","exact","activeClassName","to","Footer","Layout","children","defaultProps","FirebaseContext","createContext","useIdGen","length","nanoid","initialState","isLoaded","isLoading","goalList","error","GoalListContext","reducer","state","action","type","payload","AddGoal","useForm","register","handleSubmit","errors","reset","useContext","dispatch","code","firebase","addGoal","data","a","newGoal","console","log","onSubmit","name","ref","required","title","Goal","useParams","Goals","goalsState","useEffect","getGoals","docs","toString","map","key","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FirebaseService","db","collectionName","this","collection","orderBy","get","then","querySnapshot","empty","firebaseDoc","forEach","doc","push","date","desc","toDate","toLocaleDateString","goal","set","App","useReducer","Provider","value","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.123f465f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Header.scss';\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"wrkt-header\">\r\n      <NavLink\r\n        exact\r\n        activeClassName=\"active-nav-link\"\r\n        to=\"/\"\r\n      >\r\n        Goal List\r\n      </NavLink>\r\n      <NavLink\r\n        activeClassName=\"active-nav-link\"\r\n        to=\"/goal\"\r\n      >\r\n        Goal\r\n      </NavLink>\r\n    </header>\r\n  )\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './Footer.scss';\r\n\r\n\r\nconst Footer = () => <footer>Footer</footer>;\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Layout.scss';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\n\r\n\r\ninterface LayoutProps {\r\n  children: React.ReactNode\r\n}\r\n\r\nconst Layout = ({ children }: LayoutProps) => {\r\n  return (\r\n    <div className=\"layout\">\r\n      <Header/>\r\n      <main>\r\n        {children}\r\n      </main>\r\n      <Footer/>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nLayout.defaultProps = {\r\n  children: null,\r\n};\r\n\r\nexport default Layout;\r\n","import { createContext } from 'react';\r\nimport FirebaseService from '../services/firebase.service';\r\n\r\nconst initialContext: FirebaseService = {} as FirebaseService;\r\nconst FirebaseContext = createContext(initialContext);\r\n\r\nexport default FirebaseContext;\r\n","import { nanoid } from 'nanoid';\r\n\r\nfunction useIdGen(length: number = 8): string {\r\n  return nanoid(length);\r\n}\r\n\r\nexport default useIdGen;\r\n","import { createContext, Dispatch } from 'react';\r\n\r\nexport interface GoalItem {\r\n  title: string;\r\n  code: string;\r\n  date: string;\r\n  desc?: string;\r\n}\r\n\r\nexport interface GoalsContext {\r\n  state: GoalsState,\r\n  dispatch: Dispatch<GoalsAction>\r\n}\r\n\r\nexport type GoalsState = {\r\n  isLoaded: boolean;\r\n  goalList: GoalItem[];\r\n  isLoading: boolean;\r\n  error: string;\r\n};\r\n\r\nexport type GoalsAction =\r\n  | { type: 'ADD_GOAL', payload: GoalItem }\r\n  | { type: 'FETCH_GOAL_LIST',}\r\n  | { type: 'FETCH_GOAL_LIST_ERROR', error: string}\r\n  | { type: 'FETCH_GOAL_LIST_SUCCESS', payload: GoalItem[]}\r\n  | { type: 'CLEAR_GOAL_LIST',};\r\n\r\n\r\nconst ADD_GOAL = 'ADD_GOAL';\r\nconst FETCH_GOAL_LIST = 'FETCH_GOAL_LIST';\r\nconst FETCH_GOAL_LIST_SUCCESS = 'FETCH_GOAL_LIST_SUCCESS';\r\nconst FETCH_GOAL_LIST_ERROR = 'FETCH_GOAL_LIST_ERROR';\r\nconst CLEAR_GOAL_LIST = 'CLEAR_GOAL_LIST';\r\n\r\nexport const initialState: GoalsState = {\r\n  isLoaded: false,\r\n  isLoading: false,\r\n  goalList: [],\r\n  error: '',\r\n};\r\n\r\nconst initialContext: GoalsContext = {} as GoalsContext;\r\n\r\nexport const GoalListContext = createContext(initialContext);\r\n\r\nexport const reducer = (state: GoalsState, action: GoalsAction): GoalsState => {\r\n  switch (action.type) {\r\n    case FETCH_GOAL_LIST:\r\n      return ({\r\n        ...state,\r\n        isLoading: true,\r\n        isLoaded: false,\r\n        error: '',\r\n      });\r\n    case FETCH_GOAL_LIST_SUCCESS:\r\n      return ({\r\n        ...state,\r\n        goalList: action.payload,\r\n        isLoading: false,\r\n        isLoaded: true,\r\n      });\r\n    case ADD_GOAL:\r\n      return ({\r\n        ...state,\r\n        ...action.payload,\r\n      });\r\n    case FETCH_GOAL_LIST_ERROR:\r\n      return ({\r\n        ...state,\r\n        isLoading: false,\r\n        isLoaded: false,\r\n        error: action.error,\r\n      })\r\n    case CLEAR_GOAL_LIST:\r\n      return ({\r\n        ...initialState\r\n      })\r\n    default:\r\n      return {...state};\r\n  }\r\n};\r\n","import React, { FC, useContext } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport FirebaseContext from '../../../contexts/firebase';\r\nimport useIdGen from '../../../hooks/useIdGen';\r\nimport { GoalItem, GoalListContext } from '../../../reducers/goals';\r\n\r\n\r\ntype AddGoalItem = Omit<GoalItem, 'code'>;\r\n\r\n\r\nconst AddGoal: FC = () => {\r\n  const { register, handleSubmit, errors, reset } = useForm();\r\n  const { state: goalsState, dispatch } = useContext(GoalListContext);\r\n  const code = useIdGen();\r\n\r\n  const firebase = useContext(FirebaseContext);\r\n\r\n  const addGoal = async (data: AddGoalItem) =>  {\r\n    const newGoal: GoalItem = {\r\n      ...data,\r\n      code: code,\r\n    }\r\n\r\n    try {\r\n      await firebase.addGoal(newGoal);\r\n\r\n      dispatch({\r\n        type: 'CLEAR_GOAL_LIST',\r\n      })\r\n\r\n    } catch (e) {\r\n      console.log('>>>>>> e:', e);\r\n    }\r\n\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <section className=\"add-goal\">\r\n      <form className=\"add-goal-form\" onSubmit={handleSubmit(addGoal)}>\r\n        <div className=\"add-goal-form__wrapper-field\">\r\n          <label>\r\n            Goal Title\r\n            <input name=\"title\" ref={register<HTMLInputElement>({ required: true })} />\r\n          </label>\r\n\r\n          {errors.title && <span>Title is required</span>}\r\n        </div>\r\n\r\n        <div className=\"add-goal-rom__wrapper-field\">\r\n          <label>\r\n            Goal description\r\n            <input name=\"desc\" ref={register} />\r\n          </label>\r\n        </div>\r\n\r\n        <button type=\"submit\">Add Goal</button>\r\n      </form>\r\n    </section>\r\n  )\r\n};\r\n\r\nexport default AddGoal;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\n\r\nconst Goal = () => {\r\n  const { code } = useParams();\r\n  return (<section>{code}</section>);\r\n};\r\n\r\nexport default Goal;\r\n","import React, { FC, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport FirebaseContext from '../../../contexts/firebase';\r\nimport { GoalItem, GoalListContext } from '../../../reducers/goals';\r\nimport FirebaseService from '../../../services/firebase.service';\r\n\r\n\r\nconst Goals: FC = () => {\r\n  const { state: goalsState, dispatch } = useContext(GoalListContext);\r\n  const firebase: FirebaseService = useContext(FirebaseContext);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!goalsState.isLoaded) {\r\n        dispatch({\r\n          type: 'FETCH_GOAL_LIST',\r\n        })\r\n\r\n        try {\r\n          const docs: GoalItem[] = await firebase.getGoals() || [];\r\n\r\n          dispatch({\r\n            type: 'FETCH_GOAL_LIST_SUCCESS',\r\n            payload: docs\r\n          })\r\n\r\n        } catch (e) {\r\n          dispatch({\r\n            type: 'FETCH_GOAL_LIST_ERROR',\r\n            error: e.toString(),\r\n          })\r\n        }\r\n\r\n      }\r\n    })()\r\n  }, []);\r\n\r\n  if (!goalsState.isLoaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"unstyled-list\">\r\n        {\r\n          !!goalsState.goalList.length && goalsState.goalList.map(({code, title}) => {\r\n            return (\r\n              <li key={code}>\r\n                <Link to={`/goal/${code}`}>{title}</Link>\r\n              </li>\r\n            )\r\n          })\r\n        }\r\n        {\r\n          !goalsState.goalList.length && (\r\n            <div>Goal list is empty</div>\r\n          )\r\n        }\r\n      </ul>\r\n      <Link to=\"/add-goal\">Add goal</Link>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Goals;\r\n","import * as firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nimport { GoalItem } from '../reducers/goals';\r\n\r\n\r\ninterface FirebaseGoalItem extends Omit<GoalItem, 'date'> {\r\n  date: firebase.firestore.Timestamp;\r\n}\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n};\r\n\r\nexport interface WRKTFirebase {\r\n  getGoals(): Promise<GoalItem[] | null>;\r\n  addGoal(goal: GoalItem): Promise<void>;\r\n}\r\n\r\n\r\nclass FirebaseService implements WRKTFirebase {\r\n  private db: firebase.firestore.Firestore;\r\n  private collectionName = 'goals';\r\n\r\n  constructor() {\r\n    !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();\r\n\r\n    this.db = firebase.firestore()\r\n  }\r\n\r\n  getGoals(): Promise<GoalItem[] | null> {\r\n    return this.db\r\n      .collection(this.collectionName)\r\n      .orderBy('date', 'asc')\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        if (querySnapshot.empty) {\r\n          return null;\r\n        }\r\n\r\n        const firebaseDoc: FirebaseGoalItem[] = [];\r\n\r\n        querySnapshot.forEach((doc) => {\r\n          firebaseDoc.push(doc.data() as FirebaseGoalItem);\r\n        })\r\n\r\n        const docs: GoalItem[] = firebaseDoc.map(doc => {\r\n          const { code, date, desc, title } = doc;\r\n\r\n          return ({\r\n            date: date.toDate().toLocaleDateString(),\r\n            code,\r\n            title,\r\n            desc,\r\n          })\r\n        })\r\n\r\n        return docs;\r\n      });\r\n  };\r\n\r\n\r\n  addGoal(goal: GoalItem): Promise<void> {\r\n    return this.db\r\n      .collection(this.collectionName)\r\n      .doc()\r\n      .set(goal)\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default FirebaseService;\r\n","import React, { Dispatch, useReducer } from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport Layout from './components/Layout/Layout';\r\nimport AddGoal from './components/pages/AddGoal/AddGoal';\r\nimport Goal from './components/pages/Goal/Goal';\r\nimport Goals from './components/pages/Goals/Goals';\r\nimport FirebaseContext from './contexts/firebase';\r\nimport { GoalsAction, GoalListContext, GoalsState, initialState, reducer } from './reducers/goals';\r\nimport FirebaseService from './services/firebase.service';\r\n\r\n\r\nconst App = () => {\r\n  const [state, dispatch]: [GoalsState, Dispatch<GoalsAction>] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <Router>\r\n      <FirebaseContext.Provider value={new FirebaseService()}>\r\n        <GoalListContext.Provider value={{state, dispatch}}>\r\n          <Layout>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Goals} />\r\n              <Route exact path=\"/goal/:code\" component={Goal} />\r\n              <Route exact path=\"/add-goal\" component={AddGoal} />\r\n            </Switch>\r\n          </Layout>\r\n        </GoalListContext.Provider>\r\n      </FirebaseContext.Provider>\r\n    </Router>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.scss';\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}