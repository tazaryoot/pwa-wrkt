{"version":3,"sources":["components/Header/Header.tsx","components/Footer/Footer.tsx","components/Layout/Layout.tsx","components/pages/Goal/Goal.tsx","helpers/localstorage.ts","components/pages/Goals/Goals.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","className","exact","activeClassName","to","Footer","Layout","children","defaultProps","Goal","code","useParams","getFromLS","key","dataFromLS","localStorage","getItem","JSON","parse","initialState","reducer","state","action","type","payload","Goals","useReducer","goalList","dispatch","useEffect","list","ls","map","x","title","onClick","console","log","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RA2BeA,G,YArBA,WACb,OACE,4BAAQC,UAAU,eAChB,kBAAC,IAAD,CACEC,OAAK,EACLC,gBAAgB,kBAChBC,GAAG,KAHL,aAOA,kBAAC,IAAD,CACED,gBAAgB,kBAChBC,GAAG,SAFL,WCTSC,G,MAFA,kBAAM,4CCOfC,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAChB,OACE,yBAAKN,UAAU,UACb,kBAAC,EAAD,MACA,8BACGM,GAEH,kBAAC,EAAD,QAUND,EAAOE,aAAe,CACpBD,SAAU,MAGGD,QCxBAG,EALF,WAAO,IACVC,EAASC,cAATD,KACR,OAAQ,iCAAUA,I,eCFPE,EAAY,SAAIC,GAC3B,IAAMC,EAAaC,aAAaC,QAAQH,GAQxC,OANkB,MAAdC,EACOG,KAAKC,MAAMJ,GAEX,MCDPK,EAA2B,GAW3BC,EAAU,SAACC,EAAmBC,GAClC,OAAQA,EAAOC,MACb,IAfkB,gBAoBlB,IArBa,WAsBX,MAAM,GAAN,mBACKF,GADL,YAEKC,EAAOE,UAEd,QACE,OAAOH,IAyCEI,EApCD,WAAO,IAAD,EACWC,qBAAWN,EAASD,GAD/B,mBACXQ,EADW,KACDC,EADC,KAGlBC,qBAAU,WACR,IACMC,EAAOC,EADD,aAGZH,EAAS,CACPL,KAAM,gBACNC,QAASM,MAGV,IAMH,OACE,oCACE,wBAAI7B,UAAU,mBAER0B,GAAYA,EAASK,KAAI,SAACC,GAC1B,OACE,wBAAIpB,IAAKoB,EAAEvB,MACT,kBAAC,IAAD,CAAMN,GAAE,gBAAW6B,EAAEvB,OAASuB,EAAEC,YAM1C,4BAAQC,QAjBS,WACnBC,QAAQC,IAAI,aAAc,MAgBxB,cCjDSC,EAXH,kBACV,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOpC,OAAK,EAACqC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOvB,OAAK,EAACqC,KAAK,cAAcC,UAAW/B,QCF/BgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2b121437.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './Header.scss';\n\n\nconst Header = () => {\n  return (\n    <header className=\"wrkt-header\">\n      <NavLink\n        exact\n        activeClassName=\"active-nav-link\"\n        to=\"/\"\n      >\n        Goal List\n      </NavLink>\n      <NavLink\n        activeClassName=\"active-nav-link\"\n        to=\"/goal\"\n      >\n        Goal\n      </NavLink>\n    </header>\n  )\n};\n\n\nexport default Header;\n","import React from 'react';\n\nimport './Footer.scss';\n\n\nconst Footer = () => <footer>Footer</footer>;\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Layout.scss';\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\n\n\ninterface LayoutProps {\n  children: React.ReactNode\n}\n\nconst Layout = ({ children }: LayoutProps) => {\n  return (\n    <div className=\"layout\">\n      <Header/>\n      <main>\n        {children}\n      </main>\n      <Footer/>\n    </div>\n  )\n};\n\n\nLayout.propTypes = {\n  children: PropTypes.node,\n};\n\nLayout.defaultProps = {\n  children: null,\n};\n\nexport default Layout;\n","import React from 'react';\nimport { useParams } from 'react-router';\n\n\nconst Goal = () => {\n  const { code } = useParams();\n  return (<section>{code}</section>);\n};\n\nexport default Goal;\n","export const setToLS = (key: string, data: Record<string, any>): void => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nexport const getFromLS = <T>(key: string): T => {\n  const dataFromLS = localStorage.getItem(key);\n  let result;\n  if (dataFromLS != null) {\n    result = JSON.parse(dataFromLS);\n  } else {\n    result = null\n  }\n\n  return result\n};\n\nexport const removeFromLS = (key: string): void => {\n  localStorage.removeItem(key);\n};\n\nexport default {\n  setToLS,\n  getFromLS,\n  removeFromLS,\n}\n","import React, { useEffect, useReducer } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as ls from '../../../helpers/localstorage'\n\n\nconst ADD_GOAL = 'ADD_GOAL';\nconst GET_GOAL_LIST = 'GET_GOAL_LIST';\n\nconst initialState: GoalItem[] = [];\n\nexport type Action =\n  | { type: 'ADD_GOAL', payload: GoalItem[] }\n  | { type: 'GET_GOAL_LIST', payload: GoalItem[]}\n\ninterface GoalItem {\n  title: string;\n  code: string;\n}\n\nconst reducer = (state: GoalItem[], action: Action): GoalItem[] => {\n  switch (action.type) {\n    case GET_GOAL_LIST:\n      return ([\n        ...state,\n        ...action.payload,\n      ]);\n    case ADD_GOAL:\n      return ([\n        ...state,\n        ...action.payload,\n      ]);\n    default:\n      return state;\n  }\n};\n\n\nconst Goals = () => {\n  const [goalList, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    const key = 'main-list';\n    const list = ls.getFromLS<GoalItem[]>(key);\n\n    dispatch({\n      type: 'GET_GOAL_LIST',\n      payload: list\n    })\n\n  }, []);\n\n  const clickHandler = () => {\n    console.log('>>>>>> qq:', 11);\n  };\n\n  return (\n    <>\n      <ul className=\"unstyled-list\">\n        {\n          !!goalList && goalList.map((x: GoalItem) => {\n            return (\n              <li key={x.code}>\n                <Link to={`/goal/${x.code}`}>{x.title}</Link>\n              </li>\n            )\n          })\n        }\n      </ul>\n      <button onClick={clickHandler}>Add goal</button>\n    </>\n  )\n};\n\nexport default Goals;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Layout from './components/Layout/Layout';\nimport Goal from './components/pages/Goal/Goal';\nimport Goals from './components/pages/Goals/Goals';\n\n\nconst App = () => (\n  <Router>\n    <Layout>\n      <Switch>\n        <Route exact path=\"/\" component={Goals} />\n        <Route exact path=\"/goal/:code\" component={Goal} />\n      </Switch>\n    </Layout>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}