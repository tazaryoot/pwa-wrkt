{"version":3,"sources":["components/Header/Header.tsx","components/Footer/Footer.tsx","components/Layout/Layout.tsx","components/pages/Goal/Goal.tsx","helpers/localstorage.ts","reducers/goals.ts","components/pages/Goals/Goals.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","className","exact","activeClassName","to","Footer","Layout","children","defaultProps","Goal","code","useParams","getFromLS","key","dataFromLS","localStorage","getItem","JSON","parse","initialState","GoalListContext","createContext","reducer","state","action","type","payload","Goals","useContext","goalList","dispatch","useEffect","list","ls","goalCodes","Object","keys","length","map","x","title","App","useReducer","Provider","value","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSA2BeA,G,YArBA,WACb,OACE,4BAAQC,UAAU,eAChB,kBAAC,IAAD,CACEC,OAAK,EACLC,gBAAgB,kBAChBC,GAAG,KAHL,aAOA,kBAAC,IAAD,CACED,gBAAgB,kBAChBC,GAAG,SAFL,WCTSC,G,MAFA,kBAAM,4CCOfC,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAChB,OACE,yBAAKN,UAAU,UACb,kBAAC,EAAD,MACA,8BACGM,GAEH,kBAAC,EAAD,QAUND,EAAOE,aAAe,CACpBD,SAAU,MAGGD,QCxBAG,EALF,WAAO,IACVC,EAASC,cAATD,KACR,OAAQ,iCAAUA,ICFPE,EAAY,SAAIC,GAC3B,IAAMC,EAAaC,aAAaC,QAAQH,GAQxC,OANkB,MAAdC,EACOG,KAAKC,MAAMJ,GAEX,M,OCYAK,EAA0B,GAI1BC,EAAkBC,wBAFH,IAIfC,EAAU,SAACC,EAAkBC,GACxC,OAAQA,EAAOC,MACb,IAVkB,gBAelB,IAhBa,WAiBX,OAAO,YAAC,eACHF,GACAC,EAAOE,SAEd,QACE,OAAO,eAAIH,KCKFI,EAvCD,WAAO,IAAD,EACoBC,qBAAWR,GAAlCS,EADG,EACVN,MAAiBO,EADP,EACOA,SAEzBC,qBAAU,WACR,IACMC,EAAOC,EADD,cACiC,GAE7CH,EAAS,CACPL,KAAM,gBACNC,QAASM,MAGV,CAACF,IAGJ,IAAII,EAAsB,GAK1B,OAJIL,IACFK,EAAYC,OAAOC,KAAKP,IAIxB,oCACE,wBAAI5B,UAAU,mBAERiC,EAAUG,QAAUH,EAAUI,KAAI,SAACC,GAAe,IAAD,EACzBV,EAASU,GAAzB7B,EADyC,EACzCA,KAAM8B,EADmC,EACnCA,MACd,OACE,wBAAI3B,IAAKH,GACP,kBAAC,IAAD,CAAMN,GAAE,gBAAWM,IAAS8B,QAMtC,kBAAC,IAAD,CAAMpC,GAAG,aAAT,cCdSqC,EAjBH,WAAO,IAAD,EACyCC,qBAAWpB,EAASH,GAD7D,mBACTI,EADS,KACFO,EADE,KAGhB,OACE,kBAAC,IAAD,KACE,kBAACV,EAAgBuB,SAAjB,CAA0BC,MAAO,CAACrB,QAAOO,aACvC,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO5B,OAAK,EAAC2C,KAAK,IAAIC,UAAWnB,IACjC,kBAAC,IAAD,CAAOzB,OAAK,EAAC2C,KAAK,cAAcC,UAAWrC,SCPnCsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.de5400f3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Header.scss';\r\n\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"wrkt-header\">\r\n      <NavLink\r\n        exact\r\n        activeClassName=\"active-nav-link\"\r\n        to=\"/\"\r\n      >\r\n        Goal List\r\n      </NavLink>\r\n      <NavLink\r\n        activeClassName=\"active-nav-link\"\r\n        to=\"/goal\"\r\n      >\r\n        Goal\r\n      </NavLink>\r\n    </header>\r\n  )\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './Footer.scss';\r\n\r\n\r\nconst Footer = () => <footer>Footer</footer>;\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Layout.scss';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\n\r\n\r\ninterface LayoutProps {\r\n  children: React.ReactNode\r\n}\r\n\r\nconst Layout = ({ children }: LayoutProps) => {\r\n  return (\r\n    <div className=\"layout\">\r\n      <Header/>\r\n      <main>\r\n        {children}\r\n      </main>\r\n      <Footer/>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nLayout.defaultProps = {\r\n  children: null,\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\n\r\nconst Goal = () => {\r\n  const { code } = useParams();\r\n  return (<section>{code}</section>);\r\n};\r\n\r\nexport default Goal;\r\n","export const setToLS = (key: string, data: Record<string, any>): void => {\r\n  localStorage.setItem(key, JSON.stringify(data));\r\n};\r\n\r\nexport const getFromLS = <T>(key: string): T => {\r\n  const dataFromLS = localStorage.getItem(key);\r\n  let result;\r\n  if (dataFromLS != null) {\r\n    result = JSON.parse(dataFromLS);\r\n  } else {\r\n    result = null\r\n  }\r\n\r\n  return result\r\n};\r\n\r\nexport const removeFromLS = (key: string): void => {\r\n  localStorage.removeItem(key);\r\n};\r\n\r\nexport default {\r\n  setToLS,\r\n  getFromLS,\r\n  removeFromLS,\r\n}\r\n","import { createContext, Dispatch } from 'react';\r\n\r\nexport interface GoalItem {\r\n  title: string;\r\n  code: string;\r\n}\r\n\r\nexport type GoalsList = Record<string, GoalItem>;\r\n\r\nexport type Action =\r\n  | { type: 'ADD_GOAL', payload: GoalsList }\r\n  | { type: 'GET_GOAL_LIST', payload: GoalsList};\r\n\r\nexport interface GoalsContext {\r\n  state?: GoalsList,\r\n  dispatch?: Dispatch<Action>\r\n}\r\n\r\n\r\nconst ADD_GOAL = 'ADD_GOAL';\r\nconst GET_GOAL_LIST = 'GET_GOAL_LIST';\r\n\r\nexport const initialState: GoalsList = {};\r\n\r\nconst initialContext: any = {};\r\n\r\nexport const GoalListContext = createContext(initialContext);\r\n\r\nexport const reducer = (state: GoalsList, action: Action): GoalsList => {\r\n  switch (action.type) {\r\n    case GET_GOAL_LIST:\r\n      return ({\r\n        ...state,\r\n        ...action.payload,\r\n      });\r\n    case ADD_GOAL:\r\n      return ({\r\n        ...state,\r\n        ...action.payload,\r\n      });\r\n    default:\r\n      return {...state};\r\n  }\r\n};\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport * as ls from '../../../helpers/localstorage';\r\nimport { GoalListContext, GoalsList } from '../../../reducers/goals';\r\n\r\n\r\nconst Goals = () => {\r\n  const { state: goalList, dispatch } = useContext(GoalListContext);\r\n\r\n  useEffect(() => {\r\n    const key = 'main-list';\r\n    const list = ls.getFromLS<GoalsList>(key) || {};\r\n\r\n    dispatch({\r\n      type: 'GET_GOAL_LIST',\r\n      payload: list\r\n    })\r\n\r\n  }, [dispatch]);\r\n\r\n\r\n  let goalCodes: string[] = [];\r\n  if (goalList) {\r\n    goalCodes = Object.keys(goalList);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"unstyled-list\">\r\n        {\r\n          !!goalCodes.length && goalCodes.map((x: string) => {\r\n            const { code, title } = goalList[x];\r\n            return (\r\n              <li key={code}>\r\n                <Link to={`/goal/${code}`}>{title}</Link>\r\n              </li>\r\n            )\r\n          })\r\n        }\r\n      </ul>\r\n      <Link to=\"/add-goal\">Add goal</Link>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Goals;\r\n","import React, { Dispatch, useReducer } from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport Layout from './components/Layout/Layout';\r\nimport Goal from './components/pages/Goal/Goal';\r\nimport Goals from './components/pages/Goals/Goals';\r\nimport { Action, GoalListContext, GoalsList, initialState, reducer } from './reducers/goals';\r\n\r\n\r\nconst App = () => {\r\n  const [state, dispatch]: [GoalsList, Dispatch<Action>] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <Router>\r\n      <GoalListContext.Provider value={{state, dispatch}}>\r\n        <Layout>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Goals} />\r\n            <Route exact path=\"/goal/:code\" component={Goal} />\r\n          </Switch>\r\n        </Layout>\r\n      </GoalListContext.Provider>\r\n    </Router>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.scss';\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}