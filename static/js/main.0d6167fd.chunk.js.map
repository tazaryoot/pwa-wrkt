{"version":3,"sources":["components/Header/Header.tsx","components/Footer/Footer.tsx","components/Layout/Layout.tsx","services/firebase.service.ts","contexts/firebase.tsx","hooks/useIdGen.ts","reducers/goals.ts","components/pages/AddGoal/AddGoal.tsx","actions/get-goals.action.ts","components/pages/Goal/Goal.tsx","components/pages/Goals/Goals.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","className","exact","activeClassName","to","Footer","Layout","children","defaultProps","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","FirebaseService","db","collectionGoals","firebase","length","this","collection","orderBy","get","then","querySnapshot","empty","firebaseDoc","forEach","doc","docData","data","firebaseDocItem","id","push","map","code","date","desc","title","toDate","toLocaleDateString","goal","firebaseGoal","Timestamp","fromDate","Date","set","delete","FirebaseContext","createContext","useIdGen","nanoid","initialState","isLoaded","isLoading","goalList","error","GoalListContext","reducer","state","action","type","payload","AddGoal","useForm","register","handleSubmit","errors","reset","dispatch","useContext","addGoal","a","newGoal","console","log","onSubmit","name","ref","required","getGoalsAction","service","getGoals","docs","toString","Goal","useParams","history","useHistory","goalsState","useEffect","deleteGoal","goalItem","find","x","onClick","Goals","key","App","useReducer","Provider","value","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d6167fd.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './Header.scss';\n\n\nconst Header = () => {\n  return (\n    <header className=\"wrkt-header\">\n      <NavLink\n        exact\n        activeClassName=\"active-nav-link\"\n        to=\"/\"\n      >\n        Goal List\n      </NavLink>\n      <NavLink\n        activeClassName=\"active-nav-link\"\n        to=\"/goal\"\n      >\n        Goal\n      </NavLink>\n    </header>\n  )\n};\n\n\nexport default Header;\n","import React from 'react';\n\nimport './Footer.scss';\n\n\nconst Footer = () => <footer>Footer</footer>;\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Layout.scss';\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\n\n\ninterface LayoutProps {\n  children: React.ReactNode\n}\n\nconst Layout = ({ children }: LayoutProps) => {\n  return (\n    <div className=\"layout\">\n      <Header/>\n      <main>\n        {children}\n      </main>\n      <Footer/>\n    </div>\n  )\n};\n\n\nLayout.propTypes = {\n  children: PropTypes.node,\n};\n\nLayout.defaultProps = {\n  children: null,\n};\n\nexport default Layout;\n","import * as firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nimport { GoalItem } from '../reducers/goals';\n\n\ninterface FirebaseGoalItem extends Omit<GoalItem, 'date'> {\n  date: firebase.firestore.Timestamp;\n  desc: string;\n}\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n};\n\nexport interface WRKTDatabaseService {\n  getGoals(): Promise<GoalItem[] | null>;\n  addGoal(goal: GoalItem): Promise<void>;\n  deleteGoal(id: string): Promise<void>;\n}\n\n\nclass FirebaseService implements WRKTDatabaseService {\n  private db: firebase.firestore.Firestore;\n  private collectionGoals = 'goals';\n\n  constructor() {\n    !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();\n\n    this.db = firebase.firestore()\n  }\n\n  getGoals(): Promise<GoalItem[] | null> {\n    return this.db\n      .collection(this.collectionGoals)\n      .orderBy('date', 'asc')\n      .get()\n      .then((querySnapshot) => {\n        if (querySnapshot.empty) {\n          return null;\n        }\n\n        const firebaseDoc: FirebaseGoalItem[] = [];\n\n        querySnapshot.forEach((doc) => {\n          const docData: FirebaseGoalItem = doc.data() as FirebaseGoalItem;\n\n          const firebaseDocItem: FirebaseGoalItem = {\n            ...docData,\n            id: doc.id,\n          }\n\n          firebaseDoc.push(firebaseDocItem);\n        })\n\n        const docs: GoalItem[] = firebaseDoc.map(doc => {\n          const { code, date, desc, title, id } = doc;\n\n          return ({\n            date: date.toDate().toLocaleDateString(),\n            id,\n            code,\n            title,\n            desc,\n          })\n        })\n\n        return docs;\n      });\n  };\n\n\n  addGoal(goal: GoalItem): Promise<void> {\n    const { desc = '', title, code } = goal;\n    const firebaseGoal: Omit<FirebaseGoalItem, 'id'> = {\n      desc,\n      code,\n      title,\n      date: firebase.firestore.Timestamp.fromDate(new Date()),\n    }\n\n    return this.db\n      .collection(this.collectionGoals)\n      .doc()\n      .set(firebaseGoal);\n  }\n\n\n  deleteGoal(id: string): Promise<void> {\n    return this.db\n      .collection(this.collectionGoals)\n      .doc(id)\n      .delete();\n  }\n}\n\n\n\nexport default FirebaseService;\n","import React from 'react';\nimport { createContext, FC } from 'react';\nimport FirebaseService from '../services/firebase.service';\n\nexport const FirebaseContext = createContext(new FirebaseService());\n\ntype TProps = {\n  children: unknown;\n}\n\nconst FirebaseContextProvider: FC<TProps> = ({ children }) => {\n  return (\n    <FirebaseContext.Provider value={new FirebaseService()} >\n      {children}\n    </FirebaseContext.Provider>\n  )\n}\n\nexport default FirebaseContextProvider;\n","import { nanoid } from 'nanoid';\n\nfunction useIdGen(length: number = 8): string {\n  return nanoid(length);\n}\n\nexport default useIdGen;\n","import { createContext, Dispatch } from 'react';\n\nexport interface GoalItem {\n  id: string;\n  title: string;\n  code: string;\n  date: string;\n  desc?: string;\n}\n\nexport interface GoalsContext {\n  state: GoalsState,\n  dispatch: Dispatch<GoalsAction>\n}\n\nexport type GoalsState = {\n  isLoaded: boolean;\n  goalList: GoalItem[];\n  isLoading: boolean;\n  error: string;\n};\n\nexport type GoalsAction =\n  | { type: 'ADD_GOAL', payload: GoalItem }\n  | { type: 'FETCH_GOAL_LIST',}\n  | { type: 'FETCH_GOAL_LIST_ERROR', error: string }\n  | { type: 'FETCH_GOAL_LIST_SUCCESS', payload: GoalItem[] }\n  | { type: 'CLEAR_GOAL_LIST' }\n  | { type: 'DELETE_GOAL' };\n\nexport const initialState: GoalsState = {\n  isLoaded: false,\n  isLoading: false,\n  goalList: [],\n  error: '',\n};\n\nconst initialContext: GoalsContext = {} as GoalsContext;\n\nexport const GoalListContext = createContext(initialContext);\n\nexport const reducer = (state: GoalsState, action: GoalsAction): GoalsState => {\n  switch (action.type) {\n    case 'FETCH_GOAL_LIST':\n      return ({\n        ...state,\n        isLoading: true,\n        isLoaded: false,\n        error: '',\n      });\n    case 'FETCH_GOAL_LIST_SUCCESS':\n      return ({\n        ...state,\n        goalList: action.payload,\n        isLoading: false,\n        isLoaded: true,\n      });\n    case 'ADD_GOAL':\n      return ({\n        ...state,\n        ...action.payload,\n      });\n    case 'FETCH_GOAL_LIST_ERROR':\n      return ({\n        ...state,\n        isLoading: false,\n        isLoaded: false,\n        error: action.error,\n      })\n    case 'DELETE_GOAL':\n    case 'CLEAR_GOAL_LIST':\n      return ({\n        ...initialState\n      })\n    default:\n      return {...state};\n  }\n};\n","import React, { FC, useContext } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { FirebaseContext } from '../../../contexts/firebase';\nimport useIdGen from '../../../hooks/useIdGen';\nimport { GoalItem, GoalListContext } from '../../../reducers/goals';\n\n\ntype AddGoalItem = Omit<GoalItem, 'code'>;\n\n\nconst AddGoal: FC = () => {\n  const { register, handleSubmit, errors, reset } = useForm();\n  const { dispatch } = useContext(GoalListContext);\n  const code = useIdGen();\n\n  const firebase = useContext(FirebaseContext);\n\n  const addGoal = async (data: AddGoalItem) =>  {\n    const newGoal: GoalItem = {\n      ...data,\n      code: code,\n    }\n\n    try {\n      await firebase.addGoal(newGoal);\n\n      dispatch({\n        type: 'CLEAR_GOAL_LIST',\n      })\n\n    } catch (e) {\n      console.log('>>>>>> e:', e);\n    }\n\n    reset();\n  };\n\n  return (\n    <section className=\"add-goal\">\n      <form className=\"add-goal-form\" onSubmit={handleSubmit(addGoal)}>\n        <div className=\"add-goal-form__wrapper-field\">\n          <label>\n            Goal Title\n            <input name=\"title\" ref={register<HTMLInputElement>({ required: true })} />\n          </label>\n\n          {errors.title && <span>Title is required</span>}\n        </div>\n\n        <div className=\"add-goal-rom__wrapper-field\">\n          <label>\n            Goal description\n            <input name=\"desc\" ref={register} />\n          </label>\n        </div>\n\n        <button type=\"submit\">Add Goal</button>\n      </form>\n    </section>\n  )\n};\n\nexport default AddGoal;\n","import React from 'react';\n\nimport { GoalItem, GoalsAction } from '../reducers/goals';\nimport { WRKTDatabaseService } from '../services/firebase.service';\n\nexport default async function getGoalsAction(dispatch: React.Dispatch<GoalsAction>, service: WRKTDatabaseService): Promise<unknown> {\n  dispatch({\n    type: 'FETCH_GOAL_LIST',\n  })\n\n  try {\n    const docs: GoalItem[] = await service.getGoals() || [];\n\n    dispatch({\n      type: 'FETCH_GOAL_LIST_SUCCESS',\n      payload: docs\n    });\n\n    return true;\n\n  } catch (e) {\n    dispatch({\n      type: 'FETCH_GOAL_LIST_ERROR',\n      error: e.toString(),\n    });\n\n    return false;\n  }\n\n}\n","import React, { useContext, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router';\n\nimport getGoalsAction from '../../../actions/get-goals.action';\nimport { FirebaseContext } from '../../../contexts/firebase';\nimport { GoalItem, GoalListContext } from '../../../reducers/goals';\nimport FirebaseService from '../../../services/firebase.service';\n\nimport './style.scss';\n\n\nconst Goal = () => {\n  const { code } = useParams();\n  const history = useHistory();\n  const { state: goalsState, dispatch } = useContext(GoalListContext);\n  const firebase: FirebaseService = useContext(FirebaseContext);\n\n  useEffect(() => {\n    (async () => {\n      if (!goalsState.isLoaded) {\n        await getGoalsAction(dispatch, firebase);\n      }\n    })()\n  }, []);\n\n  if (!goalsState.isLoaded) {\n    return <div>Goal not found</div>;\n  }\n\n  const deleteGoal = async (): Promise<unknown> => {\n    await firebase.deleteGoal(goalItem.id);\n\n    dispatch({\n      type: 'DELETE_GOAL'\n    })\n\n    history.push('..');\n\n    return;\n  }\n\n  const goalItem: GoalItem = goalsState.goalList.find(x => x.code === code) || [] as unknown as GoalItem;\n\n  return (\n    <section className=\"goal\">\n      {\n        goalItem && (\n          <>\n            <div className=\"goal__title\">{goalItem.title}</div>\n            <div className=\"goal__description\">{goalItem.desc}</div>\n            <div className=\"goal__buttons-wrapper\">\n              <button className=\"goal__button goal__button_edit\">Edit</button>\n              <button\n                className=\"goal__button goal__button_delete\"\n                onClick={deleteGoal}\n              >\n                Delete\n              </button>\n            </div>\n          </>\n        )\n      }\n    </section>\n  );\n};\n\nexport default Goal;\n","import React, { FC, useContext, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport getGoalsAction from '../../../actions/get-goals.action';\n\nimport { FirebaseContext } from '../../../contexts/firebase';\nimport { GoalListContext } from '../../../reducers/goals';\nimport FirebaseService from '../../../services/firebase.service';\n\n\nconst Goals: FC = () => {\n  const { state: goalsState, dispatch } = useContext(GoalListContext);\n  const firebase: FirebaseService = useContext(FirebaseContext);\n\n  useEffect(() => {\n    (async () => {\n      if (!goalsState.isLoaded) {\n        await getGoalsAction(dispatch, firebase);\n      }\n    })()\n  }, []);\n\n  if (!goalsState.isLoaded) {\n    return null;\n  }\n\n  return (\n    <>\n      <ul className=\"unstyled-list\">\n        {\n          !!goalsState.goalList.length && goalsState.goalList.map(({code, title}) => {\n            return (\n              <li key={code}>\n                <Link to={`/goal/${code}`}>{title}</Link>\n              </li>\n            )\n          })\n        }\n        {\n          !goalsState.goalList.length && (\n            <div>Goal list is empty</div>\n          )\n        }\n      </ul>\n      <Link to=\"/add-goal\">Add goal</Link>\n    </>\n  )\n};\n\nexport default Goals;\n","import React, { Dispatch, useReducer } from 'react';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Layout from './components/Layout/Layout';\nimport AddGoal from './components/pages/AddGoal/AddGoal';\nimport Goal from './components/pages/Goal/Goal';\nimport Goals from './components/pages/Goals/Goals';\nimport { GoalListContext, GoalsAction, GoalsState, initialState, reducer } from './reducers/goals';\n\n\nconst App = () => {\n  const [state, dispatch]: [GoalsState, Dispatch<GoalsAction>] = useReducer(reducer, initialState);\n\n  return (\n    <Router>\n      <GoalListContext.Provider value={{state, dispatch}}>\n        <Layout>\n          <Switch>\n            <Route exact path=\"/\" component={Goals} />\n            <Route exact path=\"/goal/:code\" component={Goal} />\n            <Route exact path=\"/add-goal\" component={AddGoal} />\n          </Switch>\n        </Layout>\n      </GoalListContext.Provider>\n    </Router>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}